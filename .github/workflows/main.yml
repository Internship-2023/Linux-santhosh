name: Self-Hosted Runner Workflow

on: [push]

jobs:
  build:
    runs-on: self-hosted  # This ensures the job runs on your self-hosted runner

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Setup Node.js
      uses: actions/setup-node@v2
      with:
        node-version: '14'  # Use Node.js version 14

    - name: Install dependencies
      run: npm install

    - name: Run a script on the runner
      run: |
        echo "Hello from the self-hosted runner!"
        npm install
        pm2 start "npm start -- --port=3001" 
        sonar-scanner \
        -Dsonar.projectKey=lockel \
        -Dsonar.sources=. \
        -Dsonar.host.url=http://localhost:3000 \
        -Dsonar.token=sqp_adb9f247dbbcbb2b41a4cda26de04fba02c95ddb
        
    # - name: Check pass level
    #   run: |
    #     # This assumes your test results are stored in a file named test-results.xml
    #     # Replace this with the actual path to your test results file
    #     TEST_RESULTS=$(cat test-results.xml)
        
    #     # Define the passing level as a percentage (e.g., 80%)
    #     PASSING_LEVEL=80
        
    #     # Extract the test pass rate from the test results (modify this based on your actual test result format)
    #     TEST_PASS_RATE=$(echo "$TEST_RESULTS" | grep -oP 'pass_rate="\K[^"]+')
        
    #     # Compare the test pass rate with the passing level
    #     if (( $(bc <<< "$TEST_PASS_RATE >= $PASSING_LEVEL") )); then
    #       echo "Tests passed at a satisfactory level"
    #     else
    #       echo "Tests did not pass at the expected level"
    #       exit 1  # This will mark the workflow as failed
    #     fi

    # - name: Check pass level
    #   run: |
    #     # Replace with the actual parsing logic for your test result format
    #     TEST_PASS_RATE=$(grep -oP 'pass_rate="\K[^"]+' test-results.xml)
        
    #     # Define the passing level as a percentage (e.g., 80%)
    #     PASSING_LEVEL=80
        
    #     # Compare the test pass rate with the passing level
    #     if (( $(bc <<< "$TEST_PASS_RATE >= $PASSING_LEVEL") )); then
    #       echo "Tests passed at a satisfactory level"
    #     else
    #       echo "Tests did not pass at the expected level"
    #       exit 1  # This will mark the workflow as failed
    #     fi

    - name: Check pass level
      run: |
        # Define the passing level as a percentage (e.g., 80%)
        PASSING_LEVEL=80
        
        # Simulate the test pass rate (replace this with your actual logic)
        # For example, if you have a variable or command that calculates the pass rate
        # TEST_PASS_RATE=$(calculate_pass_rate)
        TEST_PASS_RATE=85  # Simulated pass rate
        
        # Compare the test pass rate with the passing level
        if (( $TEST_PASS_RATE >= $PASSING_LEVEL )); then
          echo "Tests passed at a satisfactory level"
        else
          echo "Tests did not pass at the expected level"
          exit 1  # This will mark the workflow as failed
        fi

    # - name: Send message to Google Chat
    #   if: ${{ job.status == 'success' }}
    #   run: |
    #     MESSAGE="Workflow succeeded. Tests passed at a satisfactory level. Link to your project: http://localhost:3000/dashboard?id=lockel"
    #     WEBHOOK_URL="https://chat.googleapis.com/v1/spaces/AAAAiYRfdXo/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=g_0nbpFNOz5S45a_KClz6Mpq-VkR6baR54pD5FNgwrQ"

    # - name: Send styled message to Google Chat
    #   if: ${{ job.status == 'success' }}
    #   run: |
    #     cat << EOF > payload.json
    #     {
    #       "cardsV2": [
    #         {
    #           "header": {
    #             "title": "Workflow Status",
    #             "subtitle": "Tests passed at a satisfactory level",
    #             "imageUrl": "https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcR3pr9N1-UZyVVE6NRum-iQukB4MAvxtbfLeUwsOoiBpg&s",
    #             "imageStyle": "AVATAR"
    #           },
    #           "sections": [
    #             {
    #               "widgets": [
    #                 {
    #                   "keyValue": {
    #                     "topLabel": "Job",
    #                     "content": "$GITHUB_JOB",
    #                     "contentMultiline": true
    #                   }
    #                 },
    #                 {
    #                   "keyValue": {
    #                     "topLabel": "Environment",
    #                     "content": "$GITHUB_ENV",
    #                     "contentMultiline": true
    #                   }
    #                 },
    #                 {
    #                   "keyValue": {
    #                     "topLabel": "Branch",
    #                     "content": "$GITHUB_REF",
    #                     "contentMultiline": true
    #                   }
    #                 },
    #                 {
    #                   "keyValue": {
    #                     "topLabel": "Commited-By",
    #                     "content": "$GITHUB_ACTOR",
    #                     "contentMultiline": true
    #                   }
    #                 },
    #                 {
    #                   "keyValue": {
    #                     "topLabel": "Commit-Message",
    #                     "content": "$GITHUB_SHA",
    #                     "contentMultiline": true
    #                   }
    #                 },
    #                 {
    #                   "keyValue": {
    #                     "topLabel": "Pipeline-id",
    #                     "content": "$GITHUB_RUN_ID",
    #                     "contentMultiline": true
    #                   }
    #                 }
    #               ]
    #             }
    #           ]
    #         }
    #       ]
    #     }
    #     EOF

    #     curl -s --output /dev/null -X POST 'https://chat.googleapis.com/v1/spaces/AAAAiYRfdXo/messages?key=AIzaSyDdI0hCZtE6vySjMm-WEfRq3CPzqKqqsHI&token=g_0nbpFNOz5S45a_KClz6Mpq-VkR6baR54pD5FNgwrQ' \
    #       -H 'Content-Type: application/json' \
    #       -d @payload.json

    #     # Send a POST request to the Google Chat webhook URL
    #      curl -X POST -H "Content-Type: application/json" -d "{\"text\":\"$MESSAGE\"}" $WEBHOOK_URL


    - name: Send message to Google Chat
      if: ${{ job.status == 'success' }}
      run: |
        echo "Sending styled message to Google Chat..."
        MESSAGE="Workflow succeeded. Tests passed at a satisfactory level. Link to your project: http://localhost:3000/dashboard?id=lockel"
        WEBHOOK_URL="https://chat.googleapis.com/v1/spaces/AAAA7bTXNEg/messages?key=YOUR_API_KEY&token=YOUR_TOKEN"
      echo "Message: $MESSAGE"
      echo "Webhook URL: $WEBHOOK_URL"
    # JSON payload with card formatting
      PAYLOAD="{\"cards\": [{\"sections\": [{\"widgets\": [{\"textParagraph\": {\"text\": \"$MESSAGE\"}}]}]}]}"
      curl -X POST -H "Content-Type: application/json" -d "$PAYLOAD" $WEBHOOK_URL

